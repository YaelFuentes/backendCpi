# Ejecutor de Pruebas Completas - Backend CPI con Basic Auth
# Este script ejecuta todas las pruebas de la API con y sin autenticaci√≥n

Write-Host "================================" -ForegroundColor Cyan
Write-Host "üöÄ PRUEBAS BACKEND CPI API" -ForegroundColor Cyan
Write-Host "üîê Con Autenticaci√≥n Basic Auth" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan

# Verificar que el servidor est√© corriendo
Write-Host "`nüîç Verificando servidor..." -ForegroundColor Yellow
try {
    $serverCheck = Invoke-RestMethod -Uri "http://localhost:3000/" -Method Get -TimeoutSec 5
    Write-Host "‚úÖ Servidor respondiendo correctamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: El servidor no est√° respondiendo en http://localhost:3000" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de que el servidor est√© ejecut√°ndose con: node server.js" -ForegroundColor Yellow
    exit 1
}

# Configurar credenciales para Basic Auth
$username = "admin"
$password = "password123"
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $username, $password)))
$headers = @{
    Authorization = "Basic $base64AuthInfo"
}

Write-Host "`nüîë Usando credenciales: $username / $password" -ForegroundColor Cyan

Write-Host "`n" + "="*50 -ForegroundColor Cyan
Write-Host "üåê RUTAS SIN AUTENTICACI√ìN" -ForegroundColor Green
Write-Host "="*50 -ForegroundColor Cyan

Write-Host "`n1Ô∏è‚É£ Informaci√≥n general de la API:" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/" -Method Get
    Write-Host "‚úÖ Respuesta exitosa:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n2Ô∏è‚É£ Informaci√≥n de autenticaci√≥n:" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/auth-info" -Method Get
    Write-Host "‚úÖ Respuesta exitosa:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n" + "="*50 -ForegroundColor Cyan
Write-Host "üîí RUTAS CON AUTENTICACI√ìN REQUERIDA" -ForegroundColor Green
Write-Host "="*50 -ForegroundColor Cyan

Write-Host "`n3Ô∏è‚É£ Health Check:" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/health" -Method Get -Headers $headers
    Write-Host "‚úÖ Respuesta exitosa:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n4Ô∏è‚É£ Obtener usuarios:" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/users" -Method Get -Headers $headers
    Write-Host "‚úÖ Respuesta exitosa:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n5Ô∏è‚É£ Obtener productos:" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/products" -Method Get -Headers $headers
    Write-Host "‚úÖ Respuesta exitosa:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n6Ô∏è‚É£ Crear nuevo usuario:" -ForegroundColor Yellow
$newUser = @{
    name = "Ana Rodr√≠guez"
    email = "ana@example.com"
    age = 28
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/users" -Method Post -Body $newUser -ContentType "application/json" -Headers $headers
    Write-Host "‚úÖ Usuario creado exitosamente:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n7Ô∏è‚É£ Crear nuevo producto:" -ForegroundColor Yellow
$newProduct = @{
    name = "Smartphone Galaxy"
    price = 699.99
    category = "Electronics"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/products" -Method Post -Body $newProduct -ContentType "application/json" -Headers $headers
    Write-Host "‚úÖ Producto creado exitosamente:" -ForegroundColor Green
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n" + "="*50 -ForegroundColor Cyan
Write-Host "‚ùå PRUEBAS DE ERROR Y SEGURIDAD" -ForegroundColor Red
Write-Host "="*50 -ForegroundColor Cyan

Write-Host "`n8Ô∏è‚É£ Intentar acceso sin autenticaci√≥n (debe fallar):" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/users" -Method Get -ErrorAction Stop
    Write-Host "‚ö†Ô∏è  ADVERTENCIA: La petici√≥n no deber√≠a haber tenido √©xito sin autenticaci√≥n" -ForegroundColor Yellow
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚úÖ Error esperado (sin autenticaci√≥n): $($_.Exception.Message)" -ForegroundColor Green
}

Write-Host "`n9Ô∏è‚É£ Intentar acceso con credenciales incorrectas (debe fallar):" -ForegroundColor Yellow
$wrongAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("wrong:credentials"))
$wrongHeaders = @{ Authorization = "Basic $wrongAuth" }

try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/users" -Method Get -Headers $wrongHeaders -ErrorAction Stop
    Write-Host "‚ö†Ô∏è  ADVERTENCIA: La petici√≥n no deber√≠a haber tenido √©xito con credenciales incorrectas" -ForegroundColor Yellow
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚úÖ Error esperado (credenciales incorrectas): $($_.Exception.Message)" -ForegroundColor Green
}

Write-Host "`nüîü Ruta inexistente con autenticaci√≥n v√°lida:" -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/nonexistent" -Method Get -Headers $headers -ErrorAction Stop
    Write-Host "‚ö†Ô∏è  ADVERTENCIA: La ruta no deber√≠a existir" -ForegroundColor Yellow
    $response | ConvertTo-Json -Depth 10
} catch {
    Write-Host "‚úÖ Error esperado (ruta no encontrada): $($_.Exception.Message)" -ForegroundColor Green
}

Write-Host "`n" + "="*50 -ForegroundColor Cyan
Write-Host "üìä RESUMEN DE PRUEBAS COMPLETADAS" -ForegroundColor Cyan
Write-Host "="*50 -ForegroundColor Cyan

Write-Host "‚úÖ Pruebas de rutas sin autenticaci√≥n: Completadas" -ForegroundColor Green
Write-Host "‚úÖ Pruebas de rutas con autenticaci√≥n: Completadas" -ForegroundColor Green
Write-Host "‚úÖ Pruebas de seguridad y errores: Completadas" -ForegroundColor Green
Write-Host ""
Write-Host "üéâ ¬°Todas las pruebas han sido ejecutadas!" -ForegroundColor Green
Write-Host "üìù Revisa los logs del servidor para ver el registro detallado de las peticiones" -ForegroundColor Yellow
Write-Host "üåê P√°gina de prueba disponible en: http://localhost:3000/test" -ForegroundColor Cyan